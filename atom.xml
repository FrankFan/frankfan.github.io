<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Frank Fan&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/347f3740e6de7b32c185a9bb130b312e</icon>
  <subtitle>广积粮,高筑墙,缓称王...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://fy98.com/"/>
  <updated>2018-07-10T08:27:47.431Z</updated>
  <id>http://fy98.com/</id>
  
  <author>
    <name>Frank Fan</name>
    <email>fanyong@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用webpack+babel开发npm模块</title>
    <link href="http://fy98.com/2018/07/10/about-develop-and-publish-npm/"/>
    <id>http://fy98.com/2018/07/10/about-develop-and-publish-npm/</id>
    <published>2018-07-10T08:27:25.000Z</published>
    <updated>2018-07-10T08:27:47.431Z</updated>
    
    <content type="html"><![CDATA[<h1 id="开发npm命令行工具"><a href="#开发npm命令行工具" class="headerlink" title="开发npm命令行工具"></a>开发npm命令行工具</h1><p>开发npm包，推荐使用ES6书写，再用babel进行转码，将ES6转成ES5，开发体验好，效率高。</p><a id="more"></a><p><img src="https://ws2.sinaimg.cn/large/006tNc79ly1ft3sede2lmj305w0bgaaf.jpg" alt=""></p><p>一个典型的node工程目录解构，bin目录下存放程序入口，libs目录下存放逻辑源码，使用webpack进行模块构建，使用babel进行ES6转码，使用npm script管理脚本。</p><h3 id="创建node脚本入口"><a href="#创建node脚本入口" class="headerlink" title="创建node脚本入口"></a>创建node脚本入口</h3><p>比如创建一个<code>cli.js</code>文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/uisr/bin/env node</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'your code goes here'</span>);</span><br></pre></td></tr></table></figure><ol><li>需要注意的是，第一行代码需要添加<a href="https://en.wikipedia.org/wiki/Shebang_%28Unix%29" target="_blank" rel="noopener">片段标识符</a>(也叫hashbang)，使用Node解释器执行该脚本。如果遇到权限问题，使用<code>sudo chmod +x file</code> 添加可执行权限 。</li><li>其次，在<code>package.json</code>中，必须提供<code>bin</code>字段： <code>&quot;bin&quot;: &quot;bin/cli&quot;</code>相当于指定npm的入口。</li></ol><h3 id="使用commander处理命令参数问题"><a href="#使用commander处理命令参数问题" class="headerlink" title="使用commander处理命令参数问题"></a>使用commander处理命令参数问题</h3><p>gituhub的README上写的很详细，<a href="https://github.com/tj/commander.js/blob/master/Readme_zh-CN.md" target="_blank" rel="noopener">https://github.com/tj/commander.js/blob/master/Readme_zh-CN.md</a></p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1ft3teq77flj31a80bcgnp.jpg" alt=""></p><h3 id="调试过程"><a href="#调试过程" class="headerlink" title="调试过程"></a>调试过程</h3><ol><li><p>推荐使用<code>VS Code</code>开发node应用，不仅仅代码提示、导航方面做的好，最好用的一点是可以直接F5启动调试模式，可以打断点一行一行的调试node程序，前提是设置好程序入口。对于更加复杂的应用， 可以通过配置<code>.vscode/launch.json</code>进行高级配置。</p></li><li><p>在项目根目录下通过<code>npm link</code>可以将项目link到全局<code>node_modules</code>目录，这样就可以在任意目录下都可以使用自己的命令，英文名叫<code>symbolic link</code>，每次保存原文件会link也会立即生效， 不用再次运行<code>npm link</code>命令。</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看链接的位置</span></span><br><span class="line">$ <span class="built_in">which</span> your_command</span><br></pre></td></tr></table></figure><h3 id="发布npm包"><a href="#发布npm包" class="headerlink" title="发布npm包"></a>发布npm包</h3><ol><li>首先当然是需要在<a href="http://npmjs.org/" target="_blank" rel="noopener">npm官网</a>上进行注册；</li><li>在命令行中输入<code>npm login</code>登录，验证成功之后就可以发布自己的模块了；</li><li>执行<code>npm publish</code>发布</li><li>升级版本时执行<code>npm version patch</code>命令，npm会自动升级<code>package.json</code>中的<code>version</code>字段并打<code>tag</code>,详细可以了解一下<a href="https://docs.npmjs.com/misc/semver" target="_blank" rel="noopener">semver</a></li><li>使用<code>npm view node_module</code>,可以查看模块的配置信息</li><li>可以通过<code>npm unpublish --force</code>删除发布的模块，必须是发布24小时之内（没有测过，有谁亲测了可以说一下）</li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://codeburst.io/how-to-create-and-publish-your-first-node-js-module-444e7585b738" target="_blank" rel="noopener">https://codeburst.io/how-to-create-and-publish-your-first-node-js-module-444e7585b738</a></p><p><a href="https://medium.com/@the1mills/how-to-test-your-npm-module-without-publishing-it-every-5-minutes-1c4cb4b369be" target="_blank" rel="noopener">https://medium.com/@the1mills/how-to-test-your-npm-module-without-publishing-it-every-5-minutes-1c4cb4b369be</a></p><p><a href="https://morning.work/page/2015-11/es6-es7-develop-npm-module-using-babel.html" target="_blank" rel="noopener">https://morning.work/page/2015-11/es6-es7-develop-npm-module-using-babel.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;开发npm命令行工具&quot;&gt;&lt;a href=&quot;#开发npm命令行工具&quot; class=&quot;headerlink&quot; title=&quot;开发npm命令行工具&quot;&gt;&lt;/a&gt;开发npm命令行工具&lt;/h1&gt;&lt;p&gt;开发npm包，推荐使用ES6书写，再用babel进行转码，将ES6转成ES5，开发体验好，效率高。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://fy98.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>vue.js + mint-ui 在移动端实现上拉加载-下拉刷新效果</title>
    <link href="http://fy98.com/2018/06/15/vue-mint-ui-pullup-pulldown/"/>
    <id>http://fy98.com/2018/06/15/vue-mint-ui-pullup-pulldown/</id>
    <published>2018-06-15T08:30:06.000Z</published>
    <updated>2018-06-15T09:22:22.417Z</updated>
    
    <content type="html"><![CDATA[<p>开发移动端 <code>webApp</code> 经常会遇到列表页需要下拉刷新(pull-down)和上拉加载更多(pull-up)的场景，这里介绍一下使用 Vue.js 开发时配合 Mint-UI 的 <code>&lt;Loadmore /&gt;</code> 组件实现这一功能。</p><a id="more"></a><p>Mint UI 的文档写的还是比较详细的，如果有文档看不懂地方，结合github上源代码具体实现喝issue提问，基本就能解决9成问题了。</p><p>根据<a href="http://mint-ui.github.io/docs/#/zh-cn2/quickstart" target="_blank" rel="noopener">官方文档</a>介绍，快速安装 Mint Ui，然后引入到页面中。</p><p><code>template</code>如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">x-header</span>&gt;</span>上拉加载,下拉刷新<span class="tag">&lt;/<span class="name">x-header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-loadmore-wrapper"</span> <span class="attr">ref</span>=<span class="string">"wrapper"</span> <span class="attr">:style</span>=<span class="string">"&#123; height: wrapperHeight + 'px' &#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mt-loadmore</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:top-method</span>=<span class="string">"loadTop"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:bottom-method</span>=<span class="string">"loadBottom"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:bottom-all-loaded</span>=<span class="string">"allLoaded"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">:auto-fill</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">top-status-change</span>=<span class="string">"handleTopChange"</span></span></span><br><span class="line"><span class="tag">        @<span class="attr">bottom-status-change</span>=<span class="string">"handleBottomChange"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">ref</span>=<span class="string">"loadmore"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"page-loadmore-listitem"</span> <span class="attr">:key</span>=<span class="string">"item"</span> <span class="attr">v-for</span>=<span class="string">"item in list"</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"top"</span> <span class="attr">class</span>=<span class="string">"mint-loadmore-top"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span>=<span class="string">"topStatus !== 'loading'"</span> <span class="attr">:class</span>=<span class="string">"&#123; 'is-rotate': topStatus === 'drop' &#125;"</span>&gt;</span>↓<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span>=<span class="string">"topStatus === 'loading'"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mt-spinner</span> <span class="attr">type</span>=<span class="string">"snake"</span>&gt;</span><span class="tag">&lt;/<span class="name">mt-spinner</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">"bottom"</span> <span class="attr">class</span>=<span class="string">"mint-loadmore-bottom"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span>=<span class="string">"bottomStatus !== 'loading'"</span> <span class="attr">:class</span>=<span class="string">"&#123; 'is-rotate': bottomStatus === 'drop' &#125;"</span>&gt;</span>↑<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-show</span>=<span class="string">"bottomStatus === 'loading'"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mt-spinner</span> <span class="attr">type</span>=<span class="string">"snake"</span>&gt;</span><span class="tag">&lt;/<span class="name">mt-spinner</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">mt-loadmore</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>script</code>代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; Spinner &#125; <span class="keyword">from</span> <span class="string">'mint-ui'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      list: [],</span><br><span class="line">      topStatus: <span class="string">''</span>,</span><br><span class="line">      bottomStatus: <span class="string">''</span>,</span><br><span class="line">      wrapperHeight: <span class="number">0</span>,</span><br><span class="line">      allLoaded: <span class="literal">false</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="string">'mt-spinner'</span>: Spinner, <span class="comment">// 或者使用 Vue.component(Spinner.name, Spinner) 注册组件</span></span><br><span class="line">    <span class="string">'mt-loadmore'</span>: Loadmore,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleTopChange(status) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(status);</span><br><span class="line">      <span class="keyword">this</span>.topStatus = status;</span><br><span class="line">    &#125;,</span><br><span class="line">    handleBottomChange(status) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'handleBottomChange '</span>, status);</span><br><span class="line">      <span class="keyword">this</span>.bottomStatus = status;</span><br><span class="line">    &#125;,</span><br><span class="line">    loadTop() &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'loadTop'</span>);</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> firstValue = <span class="keyword">this</span>.list[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">          <span class="keyword">this</span>.list.unshift(firstValue - i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.$refs.loadmore.onTopLoaded();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'load top end'</span>);</span><br><span class="line">      &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    loadBottom() &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> lastValue = <span class="keyword">this</span>.list[<span class="keyword">this</span>.list.length - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (lastValue &lt;= <span class="number">60</span>) &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">this</span>.list.push(lastValue + i);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.allLoaded = <span class="literal">true</span>; <span class="comment">// 若数据已全部获取完毕</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.$refs.loadmore.onBottomLoaded();<span class="comment">// 固定方法，查询完要调用一次，用于重新定位</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'loadBottom end, this.allLoaded = '</span>, <span class="keyword">this</span>.allLoaded);</span><br><span class="line">      &#125;, <span class="number">1500</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">this</span>.list.push(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="keyword">this</span>.wrapperHeight = <span class="built_in">document</span>.documentElement.clientHeight - <span class="keyword">this</span>.$refs.wrapper.getBoundingClientRect().top;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><code>style</code>代码如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang="scss"&gt;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fafafa</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span>,<span class="selector-tag">li</span>&#123; <span class="attribute">padding</span>:<span class="number">0</span>;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">list-style</span>:none&#125;;</span><br><span class="line"><span class="selector-class">.page-loadmore-wrapper</span> &#123;</span><br><span class="line">  overflow: scroll; // 很重要</span><br><span class="line">  -webkit-overflow-scrolling : touch; // 解决view滑动速度慢或者卡顿问题</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.page-loadmore-listitem</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mint-loadmore-top</span> &#123;</span><br><span class="line">  span &#123;</span><br><span class="line">    <span class="selector-tag">display</span>: <span class="selector-tag">inline-block</span>;</span><br><span class="line">    <span class="selector-tag">transition</span>: <span class="selector-class">.2s</span> <span class="selector-tag">linear</span>;</span><br><span class="line">    <span class="selector-tag">vertical-align</span>: <span class="selector-tag">middle</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">span</span><span class="selector-class">.is-rotate</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(180deg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mint-loadmore-bottom</span> &#123;</span><br><span class="line">  span &#123;</span><br><span class="line">    <span class="selector-tag">display</span>: <span class="selector-tag">inline-block</span>;</span><br><span class="line">    <span class="selector-tag">transition</span>: <span class="selector-class">.2s</span> <span class="selector-tag">linear</span>;</span><br><span class="line">    <span class="selector-tag">vertical-align</span>: <span class="selector-tag">middle</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">span</span><span class="selector-class">.is-rotate</span> &#123;</span><br><span class="line">      <span class="attribute">transform</span>: <span class="built_in">rotate</span>(180deg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>预览一下效果：</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fsau5ep506g308q0fg4qp.gif" alt=""></p><p>遇到的问题</p><ol><li>pull-up事件<code>loadBottom</code>无法触发，pull-down事件<code>loadTop</code>却正常，原因是因为没有限制<code>&lt;mt-loadmore &gt;</code>的父组件高度，同时也需要给父容器添加<code>overflow:scroll</code>属性</li><li>在手机上测试发现<code>wrapper</code>容器在滑动时有些慢、卡顿的现象，添加css属性<code>-webkit-overflow-scrolling : touch;</code>可解，原因是启用了硬件加速</li><li><code>wrapperHeight</code>高度一定要小于列表的高度才可以<code>pull up</code></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发移动端 &lt;code&gt;webApp&lt;/code&gt; 经常会遇到列表页需要下拉刷新(pull-down)和上拉加载更多(pull-up)的场景，这里介绍一下使用 Vue.js 开发时配合 Mint-UI 的 &lt;code&gt;&amp;lt;Loadmore /&amp;gt;&lt;/code&gt; 组件实现这一功能。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://fy98.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>shadowsocks server &amp; client</title>
    <link href="http://fy98.com/2017/06/26/install-shadowsocks-server-in-ubuntu-12-04-lts/"/>
    <id>http://fy98.com/2017/06/26/install-shadowsocks-server-in-ubuntu-12-04-lts/</id>
    <published>2017-06-26T14:37:13.000Z</published>
    <updated>2018-06-15T03:35:24.960Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录如何在 <code>Ubuntu 12.04 LTS</code> 版本的VPS操作系统上安装 shadowsock server 的过程。开启 shadowsocks 服务后，用 ss client 连接到 VPS上，通过VPS上网，从而达到科学上网的目的。</p><a id="more"></a><h2 id="安装-shadowsocks"><a href="#安装-shadowsocks" class="headerlink" title="安装 shadowsocks"></a>安装 shadowsocks</h2><p>通过 ssh 命令登录到远程服务器，确保 <code>apt-get install</code> 命令可用的情况下，一次输入如下命令，安装所需的软件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install build-essential</span><br><span class="line">apt-get install python-gevent python-pip</span><br><span class="line">apt-get install python-m2crypto</span><br><span class="line">apt-get install python-dev</span><br><span class="line">apt-get install supervisor</span><br><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure><h2 id="配置-shadowsocks-json-文件"><a href="#配置-shadowsocks-json-文件" class="headerlink" title="配置 shadowsocks.json 文件"></a>配置 shadowsocks.json 文件</h2><p>编辑 <code>/etc/shadowsocks.json</code> 文件。如果没有新建一个。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"server"</span>:<span class="string">"your_ip_address"</span>,</span><br><span class="line">    <span class="string">"server_port"</span>:<span class="number">8388</span>,</span><br><span class="line">    <span class="string">"local_port"</span>:<span class="number">1080</span>,</span><br><span class="line">    <span class="string">"password"</span>:<span class="string">"my password"</span>,</span><br><span class="line">    <span class="string">"timeout"</span>:<span class="number">600</span>,</span><br><span class="line">    <span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编辑 <code>/etc/supervisor/conf.d/shadowsocks.conf</code> 文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[program:shadowsocks]</span><br><span class="line">command=ssserver -c /etc/shadowsocks.json</span><br><span class="line">autorestart=<span class="literal">true</span></span><br><span class="line">user=nobody</span><br></pre></td></tr></table></figure><h2 id="服务器端启动shadowsocks"><a href="#服务器端启动shadowsocks" class="headerlink" title="服务器端启动shadowsocks"></a>服务器端启动shadowsocks</h2><p>运行supervisor<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service supervisor start</span><br><span class="line">supervisorctl reload</span><br></pre></td></tr></table></figure></p><p>如果出现以下错误: <code>Error: Another program is already listening on a port that one of our HTTP servers is configured to use. Shut this program down first before starting supervisord</code>.尝试输入<code>sudo unlink /tmp/supervisor.sock</code>, 或者 <code>unlink /var/run/supervisor.sock</code>。然后启动supervisor服务。</p><h2 id="通过以下命令管理shadowsocks进程"><a href="#通过以下命令管理shadowsocks进程" class="headerlink" title="通过以下命令管理shadowsocks进程:"></a>通过以下命令管理shadowsocks进程:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks.json -d start</span><br><span class="line">ssserver -c /etc/shadowsocks.json -d stop</span><br></pre></td></tr></table></figure><p>以上如果正常的话，服务端ss就应该跑起来了。</p><p>接下来就是根据自己的OS选择对应的<a href="https://github.com/shadowsocks/shadowsocks/wiki/Ports-and-Clients" target="_blank" rel="noopener">client</a>了</p><p><img src="/imgs_blog/1@2x.png" alt=""></p><p><img src="/imgs_blog/2@2x.png" alt=""></p><p>参考：</p><blockquote><p><a href="https://www.chedanji.com/ubuntu-shadowsocks/" target="_blank" rel="noopener">https://www.chedanji.com/ubuntu-shadowsocks/</a><br><a href="http://livezingy.com/ubuntu14-04_digitalocean_shadowsocks/" target="_blank" rel="noopener">http://livezingy.com/ubuntu14-04_digitalocean_shadowsocks/</a><br><a href="https://my.oschina.net/letiantian/blog/193418" target="_blank" rel="noopener">https://my.oschina.net/letiantian/blog/193418</a><br><a href="https://askubuntu.com/questions/426750/how-can-i-update-my-nodejs-to-the-latest-version" target="_blank" rel="noopener">https://askubuntu.com/questions/426750/how-can-i-update-my-nodejs-to-the-latest-version</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文记录如何在 &lt;code&gt;Ubuntu 12.04 LTS&lt;/code&gt; 版本的VPS操作系统上安装 shadowsock server 的过程。开启 shadowsocks 服务后，用 ss client 连接到 VPS上，通过VPS上网，从而达到科学上网的目的。&lt;/p&gt;
    
    </summary>
    
      <category term="server" scheme="http://fy98.com/categories/server/"/>
    
    
  </entry>
  
  <entry>
    <title>Ubuntu 的基本配置</title>
    <link href="http://fy98.com/2016/03/18/ubuntu-in-vps/"/>
    <id>http://fy98.com/2016/03/18/ubuntu-in-vps/</id>
    <published>2016-03-18T05:29:20.000Z</published>
    <updated>2018-06-15T09:06:33.134Z</updated>
    
    <content type="html"><![CDATA[<p>买了一个VPS，选择了Ubuntu12.04 LTS 作为操作系统，下面介绍下做过的一些配置，记录一下。</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 登录到VPS</span></span><br><span class="line">$ ssh root@[your_ip_address]</span><br></pre></td></tr></table></figure><p>登录上来以后第一件事就是查看一下系统的版本和名称等信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ lsb_release -a</span><br><span class="line"># 系统信息</span><br><span class="line">root@GalaxyServer:~# lsb_release -a</span><br><span class="line">No LSB modules are available.</span><br><span class="line">Distributor ID: Ubuntu</span><br><span class="line">Description:  Ubuntu 12.04.5 LTS</span><br><span class="line">Release:  12.04</span><br><span class="line">Codename: precise</span><br></pre></td></tr></table></figure><p>登上来以后第二件事就是安装各种软件，发现通过<code>apt-get install xxx</code>命令安装会报各种网络错误, 或者资源 <code>404 Not Found</code>等错误，导致安装软件失败。</p><p>解决办法是修改 <code>source.list</code> 源文件， 位置在 <code>/etc/apt/sources.list</code>，VPS默认的源都是指向.hk的域名，有些在url在大陆无法正常访问，所以需要修改下 <code>source.list</code>文件.</p><p><code>Tips</code>：修改服务器文件之前习惯性备份一下是个好习惯：<br><code>cp sources.list sources.list.backup</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$ cd /etc/apt/</span><br><span class="line">$ vim sources.list</span><br><span class="line"># 复制粘贴下面的↓↓↓</span><br><span class="line">deb http://cn.archive.ubuntu.com/ubuntu/ precise main restricted universe multiverse</span><br><span class="line">deb http://cn.archive.ubuntu.com/ubuntu/ precise-security main restricted universe multiverse</span><br><span class="line">deb http://cn.archive.ubuntu.com/ubuntu/ precise-updates main restricted universe multiverse</span><br><span class="line">deb http://cn.archive.ubuntu.com/ubuntu/ precise-backports main restricted universe multiverse</span><br><span class="line"># 测试版源</span><br><span class="line">deb http://cn.archive.ubuntu.com/ubuntu/ precise-proposed main restricted universe multiverse</span><br><span class="line"># 源码</span><br><span class="line">deb-src http://cn.archive.ubuntu.com/ubuntu/ precise main restricted universe multiverse</span><br><span class="line">deb-src http://cn.archive.ubuntu.com/ubuntu/ precise-security main restricted universe multiverse</span><br><span class="line">deb-src http://cn.archive.ubuntu.com/ubuntu/ precise-updates main restricted universe multiverse</span><br><span class="line">deb-src http://cn.archive.ubuntu.com/ubuntu/ precise-backports main restricted universe multiverse</span><br><span class="line"># 测试版源</span><br><span class="line">deb-src http://cn.archive.ubuntu.com/ubuntu/ precise-proposed main restricted universe multiverse</span><br><span class="line"># Canonical 合作伙伴和附加</span><br><span class="line">deb http://archive.canonical.com/ubuntu/ precise partner</span><br><span class="line">deb http://extras.ubuntu.com/ubuntu/ precise main</span><br></pre></td></tr></table></figure><p>环境准备好之后，就可以安装软件了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 安装Apache</span><br><span class="line">$ apt-get install apache2 apache2-doc apache2-utils</span><br><span class="line"># 通过下面命令验证是否安装成功</span><br><span class="line">root@GalaxyServer:~# apachectl -v</span><br><span class="line">Server version: Apache/2.2.22 (Ubuntu)</span><br><span class="line">Server built:   Jul 15 2016 15:32:46</span><br><span class="line"></span><br><span class="line"># 安装 vim</span><br><span class="line">$ apt-get install vim</span><br><span class="line"></span><br><span class="line"># 安装 curl</span><br><span class="line">$ apt-get install curl</span><br><span class="line"></span><br><span class="line"># 安装 node</span><br><span class="line">$ apt-get install nodejs</span><br><span class="line"></span><br><span class="line"># 安装 npm</span><br><span class="line">$ apt-get install npm</span><br><span class="line"></span><br><span class="line"># 可以使用一下命令检测是否安装成功</span><br><span class="line">$ node -v</span><br><span class="line">$ npm -v</span><br></pre></td></tr></table></figure><h1 id="scp-部署"><a href="#scp-部署" class="headerlink" title="scp 部署"></a>scp 部署</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp ~/tmp/hello.html root@[your_ip_address]:/var/www/</span><br></pre></td></tr></table></figure><h1 id="修改root密码"><a href="#修改root密码" class="headerlink" title="修改root密码"></a>修改root密码</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ root@GalaxyServer:~# passwd root</span><br><span class="line">Enter new UNIX password:</span><br><span class="line">Retype new UNIX password:</span><br><span class="line">passwd: password updated successfully</span><br></pre></td></tr></table></figure><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-apache-virtual-hosts-on-ubuntu-14-04-lts" target="_blank" rel="noopener">digitalocean.com非常详细的一篇文章</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;买了一个VPS，选择了Ubuntu12.04 LTS 作为操作系统，下面介绍下做过的一些配置，记录一下。&lt;/p&gt;
    
    </summary>
    
      <category term="Server" scheme="http://fy98.com/categories/Server/"/>
    
    
  </entry>
  
  <entry>
    <title>git常用命令总结</title>
    <link href="http://fy98.com/2016/01/29/git-advanced-tips/"/>
    <id>http://fy98.com/2016/01/29/git-advanced-tips/</id>
    <published>2016-01-29T15:33:54.000Z</published>
    <updated>2018-07-10T08:24:25.152Z</updated>
    
    <content type="html"><![CDATA[<p>本文总结了平时开发中常常用到的git命令。</p><a id="more"></a><h2 id="多出来的commit"><a href="#多出来的commit" class="headerlink" title="多出来的commit"></a>多出来的commit</h2><p>Git从将远程分支与本地分支合并可以有两种方式，一种是 <code>git pull</code>, 另一种是 <code>git fetch + git rebase</code>.<br>区分在于 <code>git pull</code> 是把远程分支代码拉下来，与本地分支进行merge操作，相当于<code>git fetch + git merge</code>；<br>所以使用<code>git pull</code>命令之后，会自动多出来一次merge的commit，从<code>git log</code>上面看到的情况就是多了一次commit, 而且git树也不那么整洁了。<br>推荐的做法是使用rebase而不是pull, 可以<code>git fetch ; git rebase</code> ，也可以<code>git pull —rebase</code>.</p><h2 id="tag-管理"><a href="#tag-管理" class="headerlink" title="tag 管理"></a>tag 管理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看tag</span></span><br><span class="line">$ git tag | grep dev_20150525</span><br><span class="line"><span class="comment"># 创建tag</span></span><br><span class="line">$ git tag dev_20150525_16 -m <span class="string">'comment'</span></span><br><span class="line"><span class="comment"># 把tag push到远程</span></span><br><span class="line">$ git push origin dev_20150525_16</span><br><span class="line">$ git push origin --tags</span><br><span class="line"></span><br><span class="line">Counting objects: 1, <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (1/1), 156 bytes | 0 bytes/s, <span class="keyword">done</span>.</span><br><span class="line">Total 1 (delta 0), reused 0 (delta 0)</span><br><span class="line">To git@github.com:FrankFan/fxxxk.git</span><br><span class="line"> * [new tag]         test_tag1 -&gt; test_tag1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除tag 本地删除</span></span><br><span class="line">$ git tag -d test_tag1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程的tag:推一个空的上去</span></span><br><span class="line"><span class="comment">#有的gitlab没有删除远程tag的权限</span></span><br><span class="line">$ git push origin :refs/tags/reg_201050709_01</span><br></pre></td></tr></table></figure><h2 id="git-stash-暂存"><a href="#git-stash-暂存" class="headerlink" title="git stash 暂存"></a>git stash 暂存</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 缓存到暂存区</span></span><br><span class="line">$ git stash</span><br><span class="line"><span class="comment"># 取出来</span></span><br><span class="line">$ git stash pop</span><br><span class="line"><span class="comment"># 查看暂存列表</span></span><br><span class="line">$ git stash list</span><br><span class="line"><span class="comment"># 清空</span></span><br><span class="line">$ git stash clear</span><br></pre></td></tr></table></figure><p>注意： <code>stash</code> 尽量少用，最好只缓存一次，不然顺序会搞不好弄乱的。</p><h2 id="添加一个忽略文件到-gitignore"><a href="#添加一个忽略文件到-gitignore" class="headerlink" title="添加一个忽略文件到 gitignore"></a>添加一个忽略文件到 gitignore</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rm --cached your_ignored_file</span><br></pre></td></tr></table></figure><h2 id="一个好看的git-log"><a href="#一个好看的git-log" class="headerlink" title="一个好看的git log"></a>一个好看的git log</h2><p>默认 <code>git log</code> 样式不太好看，用 alias 换成一个比较好看的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global alias.lg <span class="string">"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blu</span></span><br><span class="line"><span class="string">e)&lt;%an&gt;%Creset' --abbrev-commit"</span></span><br></pre></td></tr></table></figure><p><code>git</code>最强大的功能之一就是分支管理，下面总结下常用的<code>branch</code>命令。</p><h2 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -a <span class="comment"># 列出所有分支,包括本地的和remote的</span></span><br><span class="line">* develop</span><br><span class="line">  master</span><br><span class="line"></span><br><span class="line">$ git branch <span class="comment"># 只列出本地分支</span></span><br><span class="line">* develop</span><br><span class="line">  master</span><br><span class="line">  remotes/origin/HEAD -&gt; origin/master</span><br><span class="line">  remotes/origin/develop</span><br><span class="line">  remotes/origin/master</span><br></pre></td></tr></table></figure><h2 id="创建分支-git-checkout-b-branchname"><a href="#创建分支-git-checkout-b-branchname" class="headerlink" title="创建分支 git checkout -b [branchname]"></a>创建分支 git checkout -b [branchname]</h2><p>我们经常需要基于<code>master</code>拉一个分支进行开发，开发完成之后再将代码合并会<code>master</code>分支.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">$ git branch testing <span class="comment"># 创建一个叫 `testing` 的分支</span></span><br><span class="line"></span><br><span class="line">$ git branch <span class="comment"># 列出本地分支，发现我们还在develop分支上</span></span><br><span class="line">* develop</span><br><span class="line">  master</span><br><span class="line">  testing</span><br><span class="line"></span><br><span class="line">$ git checkout testing <span class="comment"># 切换到testing分支上</span></span><br><span class="line">Switched to branch <span class="string">'testing'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上面2个命令，首先创建了一个分支，然后再切换到新的分支上。</span></span><br><span class="line"></span><br><span class="line">$ git checkout -b <span class="string">'testing2'</span> <span class="comment"># 这个命令结合了上面2条命令，创建分支后自动切换到新分支上</span></span><br><span class="line">Switched to a new branch <span class="string">'testing2'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将本地分支push到远程</span></span><br><span class="line">$ git push origin testing</span><br></pre></td></tr></table></figure><h2 id="删除分支-git-branch-d-branchname"><a href="#删除分支-git-branch-d-branchname" class="headerlink" title="删除分支 git branch -d [branchname]"></a>删除分支 git branch -d [branchname]</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d testing2</span><br><span class="line">Deleted branch testing2 (was 3ce3fc3). <span class="comment"># 删除成功</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果恰巧你当前也在要被删除的分支上，git就会报错：</span></span><br><span class="line"><span class="comment"># error: Cannot delete the branch 'testing2' which you are currently on.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">$ git push origin :[branchname]</span><br><span class="line">git push origin :testing</span><br><span class="line">To git@github.com:<span class="built_in">test</span>/testing.git</span><br><span class="line">- [deleted] testing</span><br><span class="line"><span class="comment"># 冒号前面的空格不能少，原理是把一个空分支push到server上，相当于删除该分支</span></span><br></pre></td></tr></table></figure><h2 id="切换分支-git-checkout-branchname"><a href="#切换分支-git-checkout-branchname" class="headerlink" title="切换分支 git checkout [branchname]"></a>切换分支 git checkout [branchname]</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout testing <span class="comment"># 切换到testing分支上</span></span><br><span class="line">Switched to branch <span class="string">'testing'</span></span><br></pre></td></tr></table></figure><h2 id="合并分支（解决冲突）"><a href="#合并分支（解决冲突）" class="headerlink" title="合并分支（解决冲突）"></a>合并分支（解决冲突）</h2><p>开发分支是用来开发新功能的，开发完毕后还是要将代码饭和到主分支 <code>master</code> 中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master <span class="comment"># 首先切换到 master 分支</span></span><br><span class="line">Switched to branch <span class="string">'master'</span></span><br><span class="line">Your branch is up-to-date with <span class="string">'origin/master'</span>.</span><br><span class="line"></span><br><span class="line">$ git merge testing</span><br><span class="line"><span class="comment"># git会自动合并，如果有冲突则解决冲突</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 冲突了， 解决冲突的办法是根据terminal的提示一个文件一个文件的修改。</span></span><br><span class="line">Auto-merging README.md</span><br><span class="line">CONFLICT (content): Merge conflict <span class="keyword">in</span> README.md</span><br><span class="line">Automatic merge failed; fix conflicts and <span class="keyword">then</span> commit the result.</span><br></pre></td></tr></table></figure><h2 id="git删除push到远程服务器的commit"><a href="#git删除push到远程服务器的commit" class="headerlink" title="git删除push到远程服务器的commit"></a>git删除push到远程服务器的commit</h2><p>如果不小心把不该提交的代码或者敏感的数据（如密码）提交到远程git服务器上，可以使用<code>git reset</code>回滚到上一个commit，并且<code>commit history</code>不留下任何痕迹。</p><p>具体做法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.通过找到想要退回到的commit_id</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line"><span class="comment"># 2.本地回到上一个commit_id</span></span><br><span class="line">$ git reset --hard &lt;commit_id&gt;</span><br><span class="line"><span class="comment"># 3.推送到服务器，一定要加 --force 参数</span></span><br><span class="line">$ git push origin HEAD:master --force</span><br></pre></td></tr></table></figure><p>如果不加<code>--force</code>参数提交不上去，服务器rejected.<br><img src="http://images2015.cnblogs.com/blog/282019/201509/282019-20150908175619012-1314340411.jpg" alt=""></p><p>最后你会发现，代码服务器上也不会留下痕迹，完美。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文总结了平时开发中常常用到的git命令。&lt;/p&gt;
    
    </summary>
    
      <category term="github" scheme="http://fy98.com/categories/github/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac OS 常用命令行</title>
    <link href="http://fy98.com/2016/01/08/cmd-line-in-Mac-OS/"/>
    <id>http://fy98.com/2016/01/08/cmd-line-in-Mac-OS/</id>
    <published>2016-01-08T08:29:25.000Z</published>
    <updated>2018-07-10T08:18:17.891Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mac-os-用命令下杀死进程"><a href="#mac-os-用命令下杀死进程" class="headerlink" title="mac os 用命令下杀死进程"></a>mac os 用命令下杀死进程</h2><p>Mac没找到类似windows下进程管理器的GUI软件，通过命令也很简单：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 找到要杀死进程的id</span></span><br><span class="line">$ ps -ef | grep idea</span><br><span class="line">$ <span class="built_in">kill</span> 91107</span><br><span class="line">$ ps -ef | grep m-web</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看端口被哪个进程占用</span></span><br><span class="line">$ lsof -i:55010</span><br><span class="line">COMMAND  PID    USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME</span><br><span class="line">java    6227 fanyong    9u  IPv4 0xf526b9f45ed7c075      0t0  TCP *:55010 (LISTEN)</span><br><span class="line">$ lsof -i:9001</span><br><span class="line">COMMAND  PID    USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME</span><br><span class="line">java    6227 fanyong  254u  IPv6 0xf526b9f456b4bcf5      0t0  TCP *:etlservicemgr (LISTEN)</span><br></pre></td></tr></table></figure><h2 id="查看本机IP"><a href="#查看本机IP" class="headerlink" title="查看本机IP"></a>查看本机IP</h2><p>mac是<code>ifconfig</code>,windows下是<code>ipconfig</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ifconfig <span class="comment"># 查看全部信息</span></span><br><span class="line">$ ifconfig en0 <span class="comment"># 查看en0的IP</span></span><br><span class="line">$ ipconfig getifaddr en0 <span class="comment"># 更精确的命令</span></span><br></pre></td></tr></table></figure><h2 id="查看目录、文件占用空间"><a href="#查看目录、文件占用空间" class="headerlink" title="查看目录、文件占用空间"></a>查看目录、文件占用空间</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看目录大小：</span></span><br><span class="line">$ du -h -d 1 ~/gitlab</span><br><span class="line"><span class="comment"># 查看磁盘容量</span></span><br><span class="line">$ df -h</span><br></pre></td></tr></table></figure><h2 id="压缩-amp-解压缩"><a href="#压缩-amp-解压缩" class="headerlink" title="压缩 &amp; 解压缩"></a>压缩 &amp; 解压缩</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ 最通俗的用法</span><br><span class="line">$ zip -q -r -e -m -o [yourName].zip someThing</span><br><span class="line">-q 表示不显示压缩进度状态</span><br><span class="line">-r 表示子目录子文件全部压缩为zip  //这部比较重要，不然的话只有something这个文件夹被压缩，里面的没有被压缩进去</span><br><span class="line">-e 表示你的压缩文件需要加密，终端会提示你输入密码的</span><br><span class="line"><span class="comment"># 还有种加密方法，这种是直接在命令行里做的，比如zip -r -P Password01! modudu.zip SomeDir, 就直接用Password01!来加密modudu.zip了。</span></span><br><span class="line">-m 表示压缩完删除原文件</span><br><span class="line">-o 表示设置所有被压缩文件的最后修改时间为当前压缩时间</span><br><span class="line"><span class="comment"># 当跨目录的时候是这么操作的</span></span><br><span class="line">$ zip -q -r -e -m -o <span class="string">'\user\someone\someDir\someFile.zip'</span> <span class="string">'\users\someDir'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压缩</span></span><br><span class="line">$ unzip zippedfile.zip</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;mac-os-用命令下杀死进程&quot;&gt;&lt;a href=&quot;#mac-os-用命令下杀死进程&quot; class=&quot;headerlink&quot; title=&quot;mac os 用命令下杀死进程&quot;&gt;&lt;/a&gt;mac os 用命令下杀死进程&lt;/h2&gt;&lt;p&gt;Mac没找到类似windows下进程
      
    
    </summary>
    
      <category term="mac" scheme="http://fy98.com/categories/mac/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac下启动http-server的方法汇总</title>
    <link href="http://fy98.com/2015/11/10/http-server-in-mac-os/"/>
    <id>http://fy98.com/2015/11/10/http-server-in-mac-os/</id>
    <published>2015-11-10T05:13:34.000Z</published>
    <updated>2018-06-15T08:56:53.145Z</updated>
    
    <content type="html"><![CDATA[<p>Mac是一个对开发者特别友好的操作系统，除了好看的UI、好用的控制台，还有Terminal都是开发者的好助手。<br>比如在开发前端页面的过程中，通常需要在本地起一个http server测试站点。</p><p>以 Mac 下的 http server 为例子。</p><h2 id="Python起一个静态server"><a href="#Python起一个静态server" class="headerlink" title="Python起一个静态server"></a>Python起一个静态server</h2><p>默认8000端口<br><code>python -m SimpleHTTPServer</code> </p><p>可以指定端口：<br><code>python -m SimpleHTTPServer 8080</code>  </p><p>python会以当前目录作为根目录起一个本地server, 根据终端的反馈比如访问<code>localhost:8000</code>就可以看到效果了。</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fsbyua0yg2j30hm0bnjs6.jpg" alt=""></p><h2 id="PHP-自带web-server"><a href="#PHP-自带web-server" class="headerlink" title="PHP 自带web server"></a>PHP 自带web server</h2><p>启动php Web Server<br><code>php -S localhost:8080</code></p><p>指定网站根目录，-t命令<br><code>php -S localhost:8080 -t /www</code></p><p>支持远程访问<br><code>php -S 0.0.0.0:8080 -t /www</code></p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fsbyueg1juj30hm0bngms.jpg" alt=""></p><h2 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h2><p>推荐使用<a href="http://www.browsersync.cn/#install" target="_blank" rel="noopener">browser-sync</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g browser-sync</span><br><span class="line">npm install --save-dev browser-sync</span><br></pre></td></tr></table></figure><p>然后在<code>package.json</code>文件中指定启动命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;browser-sync start --server --files &apos;*.css, *.html&apos; &quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>browser-sync</code>不仅可以当做http server，而且当目录下的html、js、css保存时还可以自动刷新页面，提高开发效率，重点推荐这个。</p><h2 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h2><p>最后介绍下Mac自带的Apache服务器,默认80端口，启动后直接访问<code>locahost</code>可以看到<code>It works!</code>页面。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查看版本信息</span><br><span class="line">$ apachectl -v</span><br><span class="line"># 启动与关闭Apache，该操作需要root权限</span><br><span class="line">$ sudo apachectl start</span><br><span class="line">$ sudo apachectl stop</span><br></pre></td></tr></table></figure><p>默认wwww跟目录在<code>/Library/WebServer/Documents</code>, apache的安装目录在<code>/etc/apache2</code>.</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fsbyujgf7cj30hm0bnq3x.jpg" alt=""></p><p>以上所说的Server用于个人测试及小网站的开发是没有任何问题的，不过生产发布时大型应用还是要配合Nginx或Apache以达到最高效率。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Mac是一个对开发者特别友好的操作系统，除了好看的UI、好用的控制台，还有Terminal都是开发者的好助手。&lt;br&gt;比如在开发前端页面的过程中，通常需要在本地起一个http server测试站点。&lt;/p&gt;
&lt;p&gt;以 Mac 下的 http server 为例子。&lt;/p&gt;

      
    
    </summary>
    
      <category term="mac" scheme="http://fy98.com/categories/mac/"/>
    
    
  </entry>
  
  <entry>
    <title>纪念github持续 push 300天</title>
    <link href="http://fy98.com/2015/10/31/remember-git-push-300-days-continuously/"/>
    <id>http://fy98.com/2015/10/31/remember-git-push-300-days-continuously/</id>
    <published>2015-10-31T11:27:17.000Z</published>
    <updated>2018-06-15T08:48:37.186Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fsbylwrqfkj30yd0qudlv.jpg" alt=""></p><p>为什么是黄色的？<br>因为今天是<a href="http://baike.baidu.com/subview/2532/6892077.htm" target="_blank" rel="noopener">万圣节</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNc79gy1fsbylwrqfkj30yd0qudlv.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;为什么是黄色的？&lt;br&gt;因为今天是&lt;a href=&quot;http://baike.baidu.
      
    
    </summary>
    
      <category term="github" scheme="http://fy98.com/categories/github/"/>
    
    
  </entry>
  
  <entry>
    <title>从快的线上callback hell代码说起</title>
    <link href="http://fy98.com/2015/10/20/from-callback-hell-to-promise/"/>
    <id>http://fy98.com/2015/10/20/from-callback-hell-to-promise/</id>
    <published>2015-10-20T12:52:38.000Z</published>
    <updated>2018-06-15T10:21:55.362Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>就像谈到闭包必须要说js变量作用域一样，谈到 promise 之前肯定要先说谈异步编程。一直以来， javascript 处理异步方式都是使用 callback 方式，对与写 javascript 的人来时候 callback 深入人心。比如只有前端经验没有后端经验的同学看到 java 代码可能会问『为什么readFile方法可以直接返回结果？为何不使用 callback 』</p><p>由于 javascript 的单线程性质，必须等待上一个事件执行完成才能处理下一步。传统解决 javascript 异步编程的方法就是使用 callback，比如这样：</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79ly1fsc1axbripj30ar051t94.jpg" alt=""></p><p>再比如这样：</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fsbzmykdtgj31750i8wgg.jpg" alt=""></p><p>截止到2015年10月20日晚还可以访问:<br><a href="http://www.kuaidadi.com/assets/js/animate.js" target="_blank" rel="noopener">http://www.kuaidadi.com/assets/js/animate.js</a></p><p>『快的』用线上代码为我们生动的演示了什么叫<code>callback hell</code>——『回调地狱』。</p><h2 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h2><p>Promise 字面上可以理解为『承诺』，即A调用B，B返回一个『承诺』给A，然后A就可以认为B给我返回结果的时候我就执行方案一了，反之没有得到结果就执行方案二。</p><p>上面这句话翻译为代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> resB = B();</span><br><span class="line"><span class="keyword">var</span> runA = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    resB.then(execPlan1, execPlan2);</span><br><span class="line">&#125;</span><br><span class="line">runA();</span><br></pre></td></tr></table></figure><p>Promise 是一种异步操作模式，表示一个异步操作的最终结果，返回的是一个 Promise 对象，由于是立即返回，所以可以采用同步操作的流程。 这个 Promise 对象有一个 then 方法，允许指定回调函数，在异步任务完成后调用。</p><p>比如上面『快的』的例子可以改写为这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">new</span> <span class="built_in">Promise</span>(step1))</span><br><span class="line">    .then(step2)</span><br><span class="line">    .then(step3)</span><br><span class="line">    .then(step4)</span><br><span class="line">    .then(step5)</span><br><span class="line">    .then(step6)</span><br><span class="line">    .then(step7)</span><br><span class="line">    .then(step8)</span><br><span class="line">    .then(step9)</span><br><span class="line">    .then(step10)</span><br><span class="line">    .then(step11)</span><br><span class="line">    .then(step12)</span><br><span class="line">    .then(step13)</span><br><span class="line">    .then(step14)</span><br><span class="line">    .then(step15)</span><br><span class="line">    .then(step16)</span><br><span class="line">    .then(step17);</span><br></pre></td></tr></table></figure><p>看，『横向的胖子』变的苗条了，看起来是不是更加可爱呢？</p><p>Promise有个一个规范叫做 <a href="https://github.com/promises-aplus/promises-spec" target="_blank" rel="noopener">Promises/A+</a>,  有各种各样的第三方库遵循这个规范实现了 Promise/A+ 。 比如 <a href="https://github.com/kriskowal/q" target="_blank" rel="noopener">Q</a>、 <a href="https://github.com/cujojs/when" target="_blank" rel="noopener">when</a>, jQuery 有个类似的方法叫 <a href="http://api.jquery.com/category/deferred-object/" target="_blank" rel="noopener">Deferred。</a></p><p>一个 Promise 对象的实例一般有三种状态：未完成（pending）、已完成（fulfilled）和失败（rejected）。</p><blockquote><p>这三种的状态的变化途径只有两个，且只能发生一次：从“未完成”到“已完成”，或者从“未完成”到“失败”。<br>一旦当前状态变为“已完成”或“失败”，就意味着不会再发生状态变化了。</p></blockquote><p>Promise对象的运行结果，最终只有两种。</p><blockquote><p>得到一个值，状态变为fulfilled<br>抛出一个错误，状态变为rejected</p></blockquote><h2 id="参考阅读"><a href="#参考阅读" class="headerlink" title="参考阅读"></a>参考阅读</h2><ol><li><a href="http://www.alloyteam.com/2014/05/javascript-promise-mode/" target="_blank" rel="noopener">JavaScript Promise启示录</a></li><li><a href="http://liubin.github.io/promises-book/" target="_blank" rel="noopener">JavaScript Promise迷你书（中文版）</a></li><li><a href="http://www.html5rocks.com/zh/tutorials/es6/promises/" target="_blank" rel="noopener">JavaScript Promises</a></li><li><a href="http://javascript.ruanyifeng.com/advanced/promise.html" target="_blank" rel="noopener">javascript.ruanyifeng.com</a></li><li><a href="http://segmentfault.com/a/1190000002452115" target="_blank" rel="noopener">Promise/A+规范</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;就像谈到闭包必须要说js变量作用域一样，谈到 promise 之前肯定要先说谈异步编程。一直以来， javascript 处理异步方式都是使
      
    
    </summary>
    
      <category term="javascript" scheme="http://fy98.com/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>gitlab-tree 更方便的浏览Gitlab上的代码</title>
    <link href="http://fy98.com/2015/10/15/gitlab-tree-chrome-extentsion/"/>
    <id>http://fy98.com/2015/10/15/gitlab-tree-chrome-extentsion/</id>
    <published>2015-10-15T02:09:50.000Z</published>
    <updated>2018-06-15T02:15:08.293Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>经常玩<code>Github</code>的人肯定都知道大名鼎鼎的<a href="https://github.com/buunguyen/octotree" target="_blank" rel="noopener"><code>octotree</code></a>吧，这款chrome插件可以说是浏览代码的神器，利用左侧的树形菜单可以很方便的打开目录、浏览文件等，加上<code>Github</code>全站本身使用了<code>pjax</code>技术，基本全程无刷新，用户体验非常好。</p><p>本着<code>不要重新发明轮子</code>的原则，搜遍了整个互联网发现确实还没有一个可以在<code>gitlab</code><br>上浏览代码的插件。<br>现阶段几乎每家用<code>git</code>管理源代码的公司都用上了配套的<code>gitlab</code>服务，一般都会部署在企业内网。而且，在<code>octotree</code>的<code>issue</code>里有好多老外也在<code>跪求</code>作者做一个<code>gitlab</code>版本的，但是作者貌似也没有这个打算。</p><p><img src="http://images2015.cnblogs.com/blog/282019/201510/282019-20151029104304450-1035382532.jpg" alt=""></p><p>人们常说<code>不要重新发明轮子</code>, 可是别忘了这句<code>舶来语</code>后面还有一句：<code>Unless You Plan on Learning More About Wheels</code></p><h2 id="开发过程"><a href="#开发过程" class="headerlink" title="开发过程"></a>开发过程</h2><p>根据自己定的需求，最终目的是制作一款chrome插件，可以在<code>gitlab</code>上浏览代码。为了做到对用户影响最小，这个插件不会占用chrome右上角、地址栏右侧的地方，只是会在页面中加载一段<code>js</code>探测是否属于gitlab服务，如果是的话，经过一系列初始化、调用<code>Gitlab API</code>以及<code>DOM 操作</code>之后，就会生成一棵代码树，可以清晰的查看目录结构。</p><p><img src="https://raw.githubusercontent.com/FrankFan/gitlab-tree/master/docs/gitlab-tree.png" alt=""></p><p>技术方面没什么可说的，感兴趣的同学自己翻代码吧，<code>repo</code>在这里：<a href="https://github.com/FrankFan/gitlab-tree" target="_blank" rel="noopener">https://github.com/FrankFan/gitlab-tree</a></p><p>欢迎下载使用，如果有问题可以<a href="https://github.com/FrankFan/gitlab-tree/issues/new" target="_blank" rel="noopener">在这里</a>告诉我，欢迎<code>fork</code>，一起改进完善， make it better.</p><h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><p>目前<code>gitlab-tree</code>已经更新到<code>v1.3</code>版本了，基本趋于稳定，后续还会继续完善。已经放在<code>chrom web store</code>上面了。对了，安装chrome插件需要拥有[翻~墙]技能。</p><p><a href="https://chrome.google.com/webstore/detail/gitlab-tree/dllpphhnoanpcnlnipopibigdoeignbb?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/gitlab-tree/dllpphhnoanpcnlnipopibigdoeignbb?hl=zh-CN</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h2&gt;&lt;p&gt;经常玩&lt;code&gt;Github&lt;/code&gt;的人肯定都知道大名鼎鼎的&lt;a href=&quot;https://github.com/buunguye
      
    
    </summary>
    
      <category term="myworks" scheme="http://fy98.com/categories/myworks/"/>
    
    
  </entry>
  
  <entry>
    <title>开源一个图床工具 - image-uploader</title>
    <link href="http://fy98.com/2015/10/03/chrome-extentsion-image-uploader/"/>
    <id>http://fy98.com/2015/10/03/chrome-extentsion-image-uploader/</id>
    <published>2015-10-03T04:33:35.000Z</published>
    <updated>2018-06-15T08:51:37.828Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>去年做了一款 windows 下的图片上传程序，【<a href="http://fy98.com/2014/03/15/2014-03-15-cnblogs-image-bed/">自制小工具含源码——博客园图床ImageBed</a>】, 但是这个小工具只适用于 windows 平台，自从换了 Mac 以后就不能用了。于是萌生了再写一款的念头。</p><p>我理想中的软件应该是这样的：</p><ul><li>绿色免安装</li><li>简单易用，最好是傻瓜式操作</li><li>跨平台，最好windows、*nix都能用</li></ul><p>用chrome extention 来做，刚好符合上述几点要求。</p><p>于是就有了下面的这个插件：</p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fsbyor9ggij30je0e80tm.jpg" alt=""></p><p>简单说就是可以将你本地的一张图片上传到博客园的图片服务器上，变成一个可访问的url。适用于写markdown文件时插入图片的情况。<br>为什么要用博客园当图床呢？</p><ul><li>因为我用博客园写了好几年的博客，有感情了</li><li>博客园的访问速度非常快，上传速度也快</li><li>图片外链没有限制，可以随意使用</li></ul><p>使用方法很简单，点击<code>img-uploader</code>的<code>icon图标</code>，会打开一个新的页面，此时程序会判断你在博客园cnblogs.com的登录状态，如果没有登录，会提示用户先去博客园进行登录操作;</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fsbyow9gyyj30i40be0t7.jpg" alt=""></p><p>如果检测到你在博客园是登录状态，就可以上传图片：：</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fsbyp1f9t8j311b0eggng.jpg" alt=""></p><p>支持拖拽操作上传操作，还可以直接复制上传后图片的url。</p><h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><p>这个应用的源代码托管在<code>GitHub</code>上，欢迎大家 <code>star and fork</code>, 多提建议。</p><p><a href="https://github.com/FrankFan/img-uploader" target="_blank" rel="noopener">https://github.com/FrankFan/img-uploader</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>我已经把这个插件在 chrome web store 上发布了，安装地址（需~翻~墙）：</p><p><a href="https://chrome.google.com/webstore/detail/image-uploader/ncdoclefjnhbjnbcdpekmmgmgbdodklo?hl=zh-CN" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/image-uploader/ncdoclefjnhbjnbcdpekmmgmgbdodklo?hl=zh-CN</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h2&gt;&lt;p&gt;去年做了一款 windows 下的图片上传程序，【&lt;a href=&quot;http://fy98.com/2014/03/15/2014-03-1
      
    
    </summary>
    
      <category term="myworks" scheme="http://fy98.com/categories/myworks/"/>
    
    
  </entry>
  
  <entry>
    <title>ECMAScript5 Array新增方法</title>
    <link href="http://fy98.com/2015/09/23/es5-array-new-function/"/>
    <id>http://fy98.com/2015/09/23/es5-array-new-function/</id>
    <published>2015-09-23T11:30:05.000Z</published>
    <updated>2018-06-14T10:09:17.718Z</updated>
    
    <content type="html"><![CDATA[<p>ECMAScript5标准发布于2009年12月3日，它带来了一些新的，改善现有的Array数组操作的方法。<br>如果不考虑兼容性的话可以大面积使用了。</p><p>在ES5中，Array一共有10个方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.isArray</span><br><span class="line"><span class="built_in">Array</span>.prototype.indexOf</span><br><span class="line"><span class="built_in">Array</span>.prototype.lastIndexOf</span><br><span class="line"><span class="built_in">Array</span>.prototype.every</span><br><span class="line"><span class="built_in">Array</span>.prototype.some</span><br><span class="line"><span class="built_in">Array</span>.prototype.forEach</span><br><span class="line"><span class="built_in">Array</span>.prototype.map</span><br><span class="line"><span class="built_in">Array</span>.prototype.filter</span><br><span class="line"><span class="built_in">Array</span>.prototype.reduce</span><br><span class="line"><span class="built_in">Array</span>.prototype.reduceRight</span><br></pre></td></tr></table></figure><h2 id="0-Array-isArray-value"><a href="#0-Array-isArray-value" class="headerlink" title="0. Array.isArray(value)"></a>0. Array.isArray(value)</h2><p>Array.isArray() 方法用来判断某个值是否为数组。如果是，则返回 true，否则返回 false</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面的函数调用都返回 true</span></span><br><span class="line"><span class="built_in">Array</span>.isArray([]);</span><br><span class="line"><span class="built_in">Array</span>.isArray([<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="keyword">new</span> <span class="built_in">Array</span>());</span><br><span class="line"><span class="comment">// 鲜为人知的事实：其实 Array.prototype 也是一个数组。</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="built_in">Array</span>.prototype); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面的函数调用都返回 false</span></span><br><span class="line"><span class="built_in">Array</span>.isArray();</span><br><span class="line"><span class="built_in">Array</span>.isArray(&#123;&#125;);</span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="literal">null</span>);</span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="literal">undefined</span>);</span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="number">17</span>);</span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="string">'Array'</span>);</span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">Array</span>.isArray(&#123; <span class="attr">__proto__</span>: <span class="built_in">Array</span>.prototype &#125;);</span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray" target="_blank" rel="noopener">具体参考MDN</a></p><h2 id="1-indexOf-element-lastIndexOf-element"><a href="#1-indexOf-element-lastIndexOf-element" class="headerlink" title="1. .indexOf(element) / .lastIndexOf(element)"></a>1. .indexOf(element) / .lastIndexOf(element)</h2><p><code>indexOf</code>方法返回元素在数组中的第一个位置的索引，如果不存在返回”-1”</p><p>不使用<code>indexOf</code>时:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'apple'</span>,<span class="string">'orange'</span>,<span class="string">'pear'</span>],</span><br><span class="line">    found = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, length = arr.length; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] === <span class="string">'orange'</span>) &#123;</span><br><span class="line">        found = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'found orange :'</span> + found);</span><br></pre></td></tr></table></figure><p>使用<code>indexOf</code>方法后：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'apple'</span>,<span class="string">'orange'</span>,<span class="string">'pear'</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'found orange : '</span>,  arr.indexOf(<span class="string">'orange'</span>) != <span class="number">-1</span>);</span><br></pre></td></tr></table></figure><h2 id="2-filter-function-element"><a href="#2-filter-function-element" class="headerlink" title="2. .filter(function(element))"></a>2. .filter(function(element))</h2><p>filter方法创建一个一个新的匹配过滤条件的数组，返回数组的一个子集，回调函数用于逻辑判断是否返回，返回true则把当前元素加入到返回数组中，false则不加，新数组只包含返回true的值，索引缺失的不包括，原数组保持不变.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newArr = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> e % <span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">// [ 2, 4, 6 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">//[1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><p>再举个例子，不使用filter时：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">    &#123;<span class="string">"name"</span>:<span class="string">"apple"</span>, <span class="string">"count"</span>: <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span>:<span class="string">"orange"</span>, <span class="string">"count"</span>: <span class="number">5</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span>:<span class="string">"pear"</span>, <span class="string">"count"</span>: <span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span>:<span class="string">"orange"</span>, <span class="string">"count"</span>: <span class="number">16</span>&#125;,</span><br><span class="line">];</span><br><span class="line">    </span><br><span class="line"><span class="keyword">var</span> newArr = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = arr.length; i &lt; l; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i].name === <span class="string">"orange"</span>) &#123;</span><br><span class="line">        newArr.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Filter results:"</span>, newArr);</span><br></pre></td></tr></table></figure><p>使用filter后：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [</span><br><span class="line">    &#123;<span class="string">"name"</span>:<span class="string">"apple"</span>, <span class="string">"count"</span>: <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span>:<span class="string">"orange"</span>, <span class="string">"count"</span>: <span class="number">5</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span>:<span class="string">"pear"</span>, <span class="string">"count"</span>: <span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span>:<span class="string">"orange"</span>, <span class="string">"count"</span>: <span class="number">16</span>&#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newArr = arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item.name === <span class="string">"orange"</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Filter results:"</span>,newArr);</span><br></pre></td></tr></table></figure><h2 id="3-forEach-element-index-array"><a href="#3-forEach-element-index-array" class="headerlink" title="3. .forEach(element,index,array)"></a>3. .forEach(element,index,array)</h2><p>遍历数组，参数为一个回调函数，回调函数有三个参数：当前元素，元素索引，整个数组。<br>为每一个元素执行对应的回调方法。 <code>forEach</code> 是用来替换 <code>for</code> 、和 <code>for in</code> 循环的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通for循环</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i= <span class="number">0</span>, l = arr.length; i&lt; l; i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// forEach 迭代</span></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给数组中的每个元素加1</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">a.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">e, i, array</span>) </span>&#123;</span><br><span class="line">    array[i] = e + <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//[2, 3, 4, 5, 6, 7]</span></span><br></pre></td></tr></table></figure><h2 id="4-map-function-element"><a href="#4-map-function-element" class="headerlink" title="4. .map(function(element))"></a>4. .map(function(element))</h2><p><code>map()</code>对数组的每个元素进行一定操作（映射）后，会返回一个新的数组。<br>与<code>forEach</code>类似，遍历数组，回调函数的返回值组成一个新的数组，新数组的索引结构和原数组一致，原数组保持不变。</p><p>不使用<code>map()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oldArr = [</span><br><span class="line">    &#123;</span><br><span class="line">        first_name: <span class="string">"Colin"</span>,</span><br><span class="line">        last_name: <span class="string">"Toh"</span></span><br><span class="line">    &#125;, </span><br><span class="line">    &#123;</span><br><span class="line">        first_name: <span class="string">"Addy"</span>,</span><br><span class="line">        last_name: <span class="string">"Osmani"</span></span><br><span class="line">    &#125;, </span><br><span class="line">    &#123;</span><br><span class="line">        first_name: <span class="string">"Yehuda"</span>,</span><br><span class="line">        last_name: <span class="string">"Katz"</span></span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNewArr</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> newArr = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = oldArr.length; i &lt; l; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> item = oldArr[i];</span><br><span class="line">        item.full_name = [item.first_name, item.last_name].join(<span class="string">" "</span>);</span><br><span class="line">        newArr[i] = item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getNewArr());</span><br></pre></td></tr></table></figure><p>使用<code>map()</code>后：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oldArr = [</span><br><span class="line">    &#123;</span><br><span class="line">        first_name: <span class="string">"Colin"</span>,</span><br><span class="line">        last_name: <span class="string">"Toh"</span></span><br><span class="line">    &#125;, </span><br><span class="line">    &#123;</span><br><span class="line">        first_name: <span class="string">"Addy"</span>,</span><br><span class="line">        last_name: <span class="string">"Osmani"</span></span><br><span class="line">    &#125;, </span><br><span class="line">    &#123;</span><br><span class="line">        first_name: <span class="string">"Yehuda"</span>,</span><br><span class="line">        last_name: <span class="string">"Katz"</span></span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getNewArr</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> oldArr.map(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">        item.full_name = [item.first_name, item.last_name].join(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getNewArr());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 再举个例子：</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line"><span class="keyword">var</span> newArr = a.map(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> e * e;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">// [1, 4, 9, 16, 25, 36]</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//[1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><h2 id="5-reduce-function-v1-v2-initialValue-reduceRight-function-v1-v2-initialValue"><a href="#5-reduce-function-v1-v2-initialValue-reduceRight-function-v1-v2-initialValue" class="headerlink" title="5. .reduce(function(v1,v2),initialValue) / .reduceRight(function(v1,v2),initialValue)"></a>5. .reduce(function(v1,v2),initialValue) / .reduceRight(function(v1,v2),initialValue)</h2><p><code>reduce()</code>可以实现一个累加器的功能，将数组的每个值（从左到右）将其降低到一个值。<br>遍历数组，调用回调函数，<code>将数组元素组合成一个值返回</code>,<br>reduce从索引最小值开始，reduceRight反向，方法有两个参数。</p><ol><li>回调函数：把两个值合为一个，返回结果;</li><li>initialValue，一个初始值,可选。</li></ol><p>举个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a2 = a.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">v1, v2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v1 + v2;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a3 = a.reduceRight(<span class="function"><span class="keyword">function</span>(<span class="params">v1, v2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v1 - v2;</span><br><span class="line">&#125;, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a2); <span class="comment">// 21</span></span><br><span class="line"><span class="built_in">console</span>.log(a3); <span class="comment">// 79</span></span><br></pre></td></tr></table></figure></p><p>再举个例子： 统计一个数组中每个单词出现的次数。</p><p>不使用 <code>.reduce()</code>:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"apple"</span>, <span class="string">"orange"</span>, <span class="string">"apple"</span>, <span class="string">"orange"</span>, <span class="string">"pear"</span>, <span class="string">"orange"</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getWordCnt</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = arr.length; i &lt; l; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> item = arr[i];</span><br><span class="line">        obj[item] = (obj[item] + <span class="number">1</span>) || <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getWordCnt()); <span class="comment">// &#123; apple: 2, orange: 3, pear: 1 &#125;</span></span><br></pre></td></tr></table></figure></p><p>使用<code>.reduce()</code>：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"apple"</span>, <span class="string">"orange"</span>, <span class="string">"apple"</span>, <span class="string">"orange"</span>, <span class="string">"pear"</span>, <span class="string">"orange"</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getWordCnt</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, next</span>) </span>&#123;</span><br><span class="line">        prev[next] = (prev[next] + <span class="number">1</span>) || <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;, &#123;&#125;); <span class="comment">// 传递一个初始值&#123;&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getWordCnt()); <span class="comment">// &#123; apple: 2, orange: 3, pear: 1 &#125;</span></span><br></pre></td></tr></table></figure></p><p>最后再来一个例子， 加深理解传递初始值和不传初始值的区别：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"apple"</span>,<span class="string">"orange"</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">noPassValue</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,next</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"prev:"</span>,prev);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"next:"</span>,next);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> prev + <span class="string">" "</span> +next;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">passValue</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev,next</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"prev:"</span>,prev);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"next:"</span>,next);</span><br><span class="line">        </span><br><span class="line">        prev[next] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;,&#123;&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"No Additional parameter:"</span>,noPassValue());</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"----------------"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"With &#123;&#125; as an additional parameter:"</span>,passValue());</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ECMAScript5标准发布于2009年12月3日，它带来了一些新的，改善现有的Array数组操作的方法。&lt;br&gt;如果不考虑兼容性的话可以大面积使用了。&lt;/p&gt;
&lt;p&gt;在ES5中，Array一共有10个方法：&lt;/p&gt;
&lt;figure class=&quot;highlight ja
      
    
    </summary>
    
      <category term="javascript" scheme="http://fy98.com/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>手机H5 web调试利器——WEINRE (WEb INspector REmote)</title>
    <link href="http://fy98.com/2015/08/22/WEINRE-WEb-INspector-REmote-desc/"/>
    <id>http://fy98.com/2015/08/22/WEINRE-WEb-INspector-REmote-desc/</id>
    <published>2015-08-21T23:32:46.000Z</published>
    <updated>2018-06-15T09:01:24.654Z</updated>
    
    <content type="html"><![CDATA[<p>调试移动端页面，优先选择使用chrome浏览器调试，如果是<code>hybrid</code>形式的页面，可以使用chrome提供的<code>chrome://inspect/#devices</code> 安卓真机调试，不过这个要求比较高：<br>首先，你的 Chrome 版本必须高于 32<br>其次你的测试机 Android 系统高于 4.0，<br>再其次，测试机安装 Chrome for Android 才可以使用 Chrome 远程调试这项功能，<br>最后， 手机需要开启<code>USB调试模式</code></p><p>比如需要调试嵌入在APP中webView中的页面， 恰好安卓的版本比较低，没办法真机调试，<br>这时候<code>weinre</code>就是最好的选择。</p><h2 id="如何使用-weinre"><a href="#如何使用-weinre" class="headerlink" title="如何使用 weinre"></a>如何使用 weinre</h2><p>WEINRE 是 WEb INspector REmote 的缩写， 可以远程调试web页面。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>$ sudo npm install -g weinre</code><br><code>$ weinre -v</code></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>获取本机IP：172.19.17.62<br><code>$ ipconfig getifaddr en0</code></p><p>开启本地监听服务器：<br><code>weinre --boundHost 172.19.17.62</code></p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fsbyyz52rgj30lf04dt95.jpg" alt=""></p><p>打开<code>http://172.19.17.62:8080</code> ,</p><p><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fsbyz28dyzj30o60k0n16.jpg" alt=""></p><p>将这段脚本放在需要调试的手机页面中就可以远程调试了，</p><p><code>&lt;script src=&quot;http://172.19.17.62:8080/target/target-script-min.js#anonymous&quot;&gt;&lt;/script&gt;</code></p><p>加载好之后就可以在remote tab下找到需要调试的页面了， 和chrome devTools类似， 也可以查看DOM元素和控制台等。</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fsbyz8bo8xj30mm0gnabs.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;调试移动端页面，优先选择使用chrome浏览器调试，如果是&lt;code&gt;hybrid&lt;/code&gt;形式的页面，可以使用chrome提供的&lt;code&gt;chrome://inspect/#devices&lt;/code&gt; 安卓真机调试，不过这个要求比较高：&lt;br&gt;首先，你的 Chro
      
    
    </summary>
    
      <category term="javascript" scheme="http://fy98.com/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>用Photoshop处理图片使背景透明</title>
    <link href="http://fy98.com/2015/08/08/photoshop-transparency-image/"/>
    <id>http://fy98.com/2015/08/08/photoshop-transparency-image/</id>
    <published>2015-08-08T08:31:07.000Z</published>
    <updated>2018-06-15T08:46:58.486Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>打开一张图片<br><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fsbyjjssrvj306g05pmx9.jpg" alt=""></p></li><li><p>双击背景或者右键<code>背景图层</code>，新建一个图层，</p></li></ol><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fsbyjpxlcrj30fp07f3yx.jpg" alt=""></p><p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fsbyjyfgwbj306j050q33.jpg" alt=""></p><ol start="3"><li><p>选择<code>魔棒</code>工具，单击图片， 会自动选择颜色相近的范围<br><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fsbyk2jy96j30cn07dgm3.jpg" alt=""></p></li><li><p>按下键盘的<code>delete</code>键，就可以删除魔棒所选择的区域了。<br><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fsbyk77pjhj304t03waa1.jpg" alt=""></p></li></ol><p>如果还有一些不满意的小细节，可以使用放大镜工具放大图片，并将一些顽固的污点用橡皮擦擦除；<br>或者直接使用工具栏中的矩形选择工具或套索工具进行选定。选定后按下Delete键就可以将所选区域删去了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;打开一张图片&lt;br&gt;&lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNc79gy1fsbyjjssrvj306g05pmx9.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;双击背景或者右键&lt;code&gt;背景
      
    
    </summary>
    
      <category term="mac" scheme="http://fy98.com/categories/mac/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac 常用快捷键整理</title>
    <link href="http://fy98.com/2015/07/28/shortcut-key-in-mac/"/>
    <id>http://fy98.com/2015/07/28/shortcut-key-in-mac/</id>
    <published>2015-07-28T00:21:38.000Z</published>
    <updated>2018-06-15T09:03:47.451Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文本编辑"><a href="#文本编辑" class="headerlink" title="文本编辑"></a>文本编辑</h2><p>以下适用于文本编辑器，浏览器等：</p><p>跳到页首  <code>cmd</code> + <code>↑</code>  类似windows下的 <code>ctrl + home</code><br>跳到页尾  <code>cmd</code> + <code>↓</code>  类似windows下的 <code>ctrl + end</code><br>光标移到行首  <code>cmd</code> + <code>←</code>  类似windows下的 <code>home</code><br>光标移到行尾  <code>cmd</code> + <code>→</code>  类似windows下的 <code>end</code><br>选择一行  <code>cmd</code> + <code>shift</code> + <code>→</code> 或 <code>cmd</code> + <code>shift</code> + <code>→</code><br>选择一个单词  <code>option</code> + <code>shift</code> + <code>←</code> 或 <code>option</code> + <code>shift</code> + <code>→</code><br>向上滚一屏 <code>fn</code> + <code>↑</code><br>向下滚一屏 <code>fn</code> + <code>↓</code><br>删除一整行文字  <code>cmd + delete</code><br>删除一个单词    <code>option + delete</code><br>光标移动一个单词 <code>option + ←</code> 或者 <code>option + →</code></p><h2 id="截屏"><a href="#截屏" class="headerlink" title="截屏"></a>截屏</h2><p>全屏截图自动保存为文件 <code>cmd + shift + 3</code><br>区域截图自动保存为文件 <code>cmd + shift + 4</code>，这里有个小技巧，按下<code>cmd + shift + 4</code>后单击空格键，会出现一个相机的icon，表示自动捕捉这个区域。</p><h2 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h2><p>关闭当前窗口  <code>cmd + w</code><br>退出当前程序  <code>cmd + q</code><br>最小化窗口  <code>cmd + m</code><br>切换窗口程序  <code>cmd + tab</code><br>快速显示桌面  <code>cmd + F3</code><br>显示当前程序缩略图  <code>ctl + F3</code><br>显示桌面和缩略图  <code>F3</code><br>显示Dashboard  <code>F4</code> </p><h2 id="Terminal-终端"><a href="#Terminal-终端" class="headerlink" title="Terminal 终端"></a>Terminal 终端</h2><p>Mac不像<code>Ubuntu</code>可以使用 Ctrl+T 快捷键呼出终端，但是可以通过<code>control+space</code>呼出<code>Spotlight</code>，然后输入terminal回车快速打开终端。</p><p>光标移到行首 <code>ctrl</code> + <code>A</code><br>光标移到行尾  <code>ctrl</code> + <code>E</code><br>清除一行  <code>ctrl</code> + <code>U</code><br>撤销清除  <code>ctrl</code> + <code>Y</code><br>清屏  <code>ctrl</code> + <code>L</code><br>新建一个Tab  <code>cmd</code> + <code>T</code><br>关闭一个Tab  <code>cmd</code> + <code>W</code></p><h2 id="文件相关"><a href="#文件相关" class="headerlink" title="文件相关"></a>文件相关</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line">$ mkdir newDir</span><br><span class="line"><span class="comment"># 删除目录及子目录中的内容, 慎用!!</span></span><br><span class="line">$ rm -rf newDir</span><br><span class="line"><span class="comment"># 复制</span></span><br><span class="line">$ cp file toDir</span><br><span class="line"><span class="comment"># 设置目录读写权限</span></span><br><span class="line">$ sudo chmod 777 /etc/hosts</span><br></pre></td></tr></table></figure><h2 id="进程相关"><a href="#进程相关" class="headerlink" title="进程相关"></a>进程相关</h2><p>mac os x 下杀死进程<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 找到要杀死进程的id</span></span><br><span class="line">$ ps -ef | grep idea  </span><br><span class="line"><span class="comment"># 强制kill掉进程</span></span><br><span class="line">$ <span class="built_in">kill</span> 91107</span><br><span class="line"><span class="comment"># 根据项目找对应的进程id</span></span><br><span class="line">$ ps -ef | grep m-web</span><br><span class="line">$ lsof -i:55010</span><br><span class="line"></span><br><span class="line">$ lsof -i:55010 </span><br><span class="line">COMMAND  PID    USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME</span><br><span class="line">java    6227 fanyong    9u  IPv4 0xf526b9f45ed7c075      0t0  TCP *:55010 (LISTEN)</span><br><span class="line">$ lsof -i:9001</span><br><span class="line">COMMAND  PID    USER   FD   TYPE             DEVICE SIZE/OFF NODE NAME</span><br><span class="line">java    6227 fanyong  254u  IPv6 0xf526b9f456b4bcf5      0t0  TCP *:etlservicemgr (LISTEN)</span><br></pre></td></tr></table></figure></p><p><code>cmd + opt + esc</code> ，打开类似windows下任务管理器的快捷键。</p><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fsbz1p365qj30by0ah74y.jpg" alt=""></p><h2 id="网络相关"><a href="#网络相关" class="headerlink" title="网络相关"></a>网络相关</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看本机IP、Mac地址等信息</span></span><br><span class="line">$ ifconfig en0</span><br><span class="line"><span class="comment"># 查看nameserver 修改 nameserver 172.19.8.1 -&gt; nameserver 172.19.8.2</span></span><br><span class="line">$ sudo vim /etc/resolv.conf</span><br><span class="line"><span class="comment"># 诊断</span></span><br><span class="line">$ dig lujs.cn</span><br><span class="line">$ nslookup lujs.cn</span><br></pre></td></tr></table></figure><h2 id="chrome-快捷键"><a href="#chrome-快捷键" class="headerlink" title="chrome 快捷键"></a>chrome 快捷键</h2><p>新建一个Tab  <code>cmd</code> + <code>T</code><br>关闭一个Tab  <code>cmd</code> + <code>W</code><br>打开开发者工具，<code>cmd</code> + <code>option</code> + <code>I</code> Mac下F12不管用,因为系统默认把<code>F12</code>分配给了音量<br>查看源代码  <code>cmd</code> + <code>option</code> + <code>U</code><br>调试js - step over <code>cmd</code> + <code>\</code><br>调试js - step in <code>cmd</code> + <code>;</code><br>调试js - step out <code>cmd</code> + <code>&#39;</code><br>快速定位Tab  <code>cmd</code> + <code>1/2/3/等</code><br>向左切换Tab顺序  <code>cmd</code> + <code>shift</code> + <code>{</code><br>向右切换Tab顺序  <code>cmd</code> + <code>shift</code> + <code>}</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;文本编辑&quot;&gt;&lt;a href=&quot;#文本编辑&quot; class=&quot;headerlink&quot; title=&quot;文本编辑&quot;&gt;&lt;/a&gt;文本编辑&lt;/h2&gt;&lt;p&gt;以下适用于文本编辑器，浏览器等：&lt;/p&gt;
&lt;p&gt;跳到页首  &lt;code&gt;cmd&lt;/code&gt; + &lt;code&gt;↑&lt;/code
      
    
    </summary>
    
      <category term="mac" scheme="http://fy98.com/categories/mac/"/>
    
    
  </entry>
  
  <entry>
    <title>纪念github持续 push 200天</title>
    <link href="http://fy98.com/2015/07/26/remember-git-push-200-days-continuously/"/>
    <id>http://fy98.com/2015/07/26/remember-git-push-200-days-continuously/</id>
    <published>2015-07-26T15:43:20.000Z</published>
    <updated>2018-06-15T08:48:28.221Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws4.sinaimg.cn/large/006tNc79gy1fsbylrud3gj30kz08jjrl.jpg" alt=""></p><p>就像第<a href="http://fy98.com/2015/04/15/remember-git-push-100-days-continuously/">一百天记录</a>的一样，又在 <code>Github</code> 上持续 commit 了100天，达成200天新成就。</p><p>过去的这3个月里，经历了职业生涯中最严酷的日子。由于刚换工作，加上是新公司业务最为繁忙的时候，工作强度大、任务多，加班是难免的。最高成就为连续加班 <code>5+2+5+2+5</code> 天，好在新项目最后顺利上线，看着市场部门推广后拉到了许多新用户和增加的交易额，心中多少有些成就感。</p><p>负责开发公司的 <code>H5项目</code>，在技术方面进步不少，待日后整理分享吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNc79gy1fsbylrud3gj30kz08jjrl.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;就像第&lt;a href=&quot;http://fy98.com/2015/04/15/rememb
      
    
    </summary>
    
      <category term="github" scheme="http://fy98.com/categories/github/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac 下安装zshell</title>
    <link href="http://fy98.com/2015/07/08/install-zshell-in-mac/"/>
    <id>http://fy98.com/2015/07/08/install-zshell-in-mac/</id>
    <published>2015-07-08T05:17:01.000Z</published>
    <updated>2018-06-14T10:09:17.721Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是shell"><a href="#什么是shell" class="headerlink" title="什么是shell"></a>什么是shell</h2><p>操作系统是内核(core), 与操作系统通信的一层是壳，就是shell.<br>大多数命令行用户接触最多的是 <code>shell</code> 是 <code>Bash</code>，因为Bash是各个版本操作系统(Linux&amp;Mac)的默认shell,  除此之外，还有很多其他的shell可以选择。</p><p>查看当前使用的shell<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$SHELL</span></span><br></pre></td></tr></table></figure></p><p>查看系统所支持的shell<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ cat /etc/shells</span><br><span class="line"></span><br><span class="line">/bin/bash</span><br><span class="line">/bin/csh</span><br><span class="line">/bin/ksh</span><br><span class="line">/bin/sh</span><br><span class="line">/bin/tcsh</span><br><span class="line">/bin/zsh</span><br></pre></td></tr></table></figure></p><h2 id="切换默认shell"><a href="#切换默认shell" class="headerlink" title="切换默认shell"></a>切换默认shell</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><h2 id="安装-on-my-shell"><a href="#安装-on-my-shell" class="headerlink" title="安装 on-my-shell"></a>安装 on-my-shell</h2><ul><li>wget</li></ul><p>确保安装了wget，使用</p><p><code>wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</code></p><ul><li>手动安装</li></ul><p>确认安装了git，使用git clone</p><p><code>git clone git://github.com/robbyrussell/oh-my-zsh.git ~/.oh-my-zsh cp ~/.oh-my-zsh/templates/zshrc.zsh-template ~/.zshrc</code></p><p>这时候我查看~/.zshrc，里面用了默认的主题<code>robbyrussell</code>,还可以设置alias, 配置插件等等。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://macshuo.com/?p=676" target="_blank" rel="noopener">http://macshuo.com/?p=676</a><br><a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">https://github.com/robbyrussell/oh-my-zsh</a><br><a href="http://ohmyz.sh/" target="_blank" rel="noopener">http://ohmyz.sh/</a><br><a href="http://www.open-open.com/lib/view/open1394763235862.html" target="_blank" rel="noopener">http://www.open-open.com/lib/view/open1394763235862.html</a><br><a href="http://www.cnblogs.com/growingkata/p/3734994.html" target="_blank" rel="noopener">http://www.cnblogs.com/growingkata/p/3734994.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是shell&quot;&gt;&lt;a href=&quot;#什么是shell&quot; class=&quot;headerlink&quot; title=&quot;什么是shell&quot;&gt;&lt;/a&gt;什么是shell&lt;/h2&gt;&lt;p&gt;操作系统是内核(core), 与操作系统通信的一层是壳，就是shell.&lt;br&gt;大多数命令行
      
    
    </summary>
    
      <category term="mac" scheme="http://fy98.com/categories/mac/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac下修改环境变量</title>
    <link href="http://fy98.com/2015/06/30/edit-environment-variable-in-mac/"/>
    <id>http://fy98.com/2015/06/30/edit-environment-variable-in-mac/</id>
    <published>2015-06-30T02:27:18.000Z</published>
    <updated>2018-06-15T02:15:08.292Z</updated>
    
    <content type="html"><![CDATA[<p>如果使用默认Bash，<br>首先修改 <code>~/.bash_profile</code> 文件，添加文件路径，比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=~/bin:/usr/<span class="built_in">local</span>/bin/node:~/Downloads/software/gradle-1.0/bin/:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>然后输入  <code>source ~/.bash_profile</code> 使之生效。</p><p>如果使用的是 zshell , 编辑 <code>~/.zshrc</code> 文件, 然后再 <code>source ~/.zshrc</code>  。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打印环境变量</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如果使用默认Bash，&lt;br&gt;首先修改 &lt;code&gt;~/.bash_profile&lt;/code&gt; 文件，添加文件路径，比如：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;spa
      
    
    </summary>
    
      <category term="mac" scheme="http://fy98.com/categories/mac/"/>
    
    
  </entry>
  
  <entry>
    <title>手机Safari浏览器在隐私模式下使用本地存储localStorage问题</title>
    <link href="http://fy98.com/2015/06/09/localstorage-in-safiri-private-mode-exception/"/>
    <id>http://fy98.com/2015/06/09/localstorage-in-safiri-private-mode-exception/</id>
    <published>2015-06-09T12:15:38.000Z</published>
    <updated>2018-06-14T10:09:17.725Z</updated>
    
    <content type="html"><![CDATA[<p>开发H5 webapp时经常需要使用本地存储，如localStorage和sessionStorage存储一些数据，相比最多能存4k的cookie相比，用起来很好用。但是localStorage在iOS Safari、chrome和UC浏览器中的隐私模式（也叫无痕模式）下无法使用，手机Safari浏览器中具体表现是：</p><ul><li>localStorage对象仍然存在</li><li>但是setItem会报异常：QuotaExceededError</li><li>getItem和removeItem直接忽略</li></ul><p>Safari中控制台截图<br><img src="http://images0.cnblogs.com/blog2015/282019/201506/092058146293230.png" alt=""></p><p>判断浏览器是否支持localStorage的方法:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isLocalStorageSupported</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> testKey = <span class="string">'test'</span>,</span><br><span class="line">        storage = <span class="built_in">window</span>.sessionStorage;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        storage.setItem(testKey, <span class="string">'testValue'</span>);</span><br><span class="line">        storage.removeItem(testKey);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在实际项目中，需求如果非要坚持隐私模式也要支持的话，可以把数据写2遍，先写到localStorage中，再写到内存中。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;开发H5 webapp时经常需要使用本地存储，如localStorage和sessionStorage存储一些数据，相比最多能存4k的cookie相比，用起来很好用。但是localStorage在iOS Safari、chrome和UC浏览器中的隐私模式（也叫无痕模式）下无
      
    
    </summary>
    
      <category term="javascript" scheme="http://fy98.com/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac OS X 安装ruby环境</title>
    <link href="http://fy98.com/2015/05/27/install-ruby-and-compass-in-mac-os-x/"/>
    <id>http://fy98.com/2015/05/27/install-ruby-and-compass-in-mac-os-x/</id>
    <published>2015-05-27T12:22:01.000Z</published>
    <updated>2018-06-14T10:09:17.721Z</updated>
    
    <content type="html"><![CDATA[<p>1.查看版本<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ruby -v</span></span><br><span class="line">ruby 2.0.0p481 (2014-05-08 revision 45883) [universal.x86_64-darwin14]</span><br></pre></td></tr></table></figure></p><p>2.查看源<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gem <span class="built_in">source</span> -l</span></span><br><span class="line">*** CURRENT SOURCES ***</span><br><span class="line"></span><br><span class="line">https://rubygems.org/</span><br></pre></td></tr></table></figure></p><p>3.更换源<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gem <span class="built_in">source</span> -r https://rubygems.org/</span></span><br><span class="line"></span><br><span class="line">https://rubygems.org/ removed from sources</span><br></pre></td></tr></table></figure></p><p>4.添加源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gem <span class="built_in">source</span> -a https://ruby.taobao.org</span></span><br></pre></td></tr></table></figure><p>5.安装compass</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo install comopass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> compass -v</span></span><br><span class="line">Compass 1.0.3 (Polaris)</span><br><span class="line">Copyright (c) 2008-2015 Chris Eppstein</span><br><span class="line">Released under the MIT License.</span><br><span class="line">Compass is charityware.</span><br><span class="line">Please make a tax deductable donation for a worthy cause: http://umdf.org/compass</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.查看版本&lt;br&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;b
      
    
    </summary>
    
      <category term="mac" scheme="http://fy98.com/categories/mac/"/>
    
    
  </entry>
  
</feed>
